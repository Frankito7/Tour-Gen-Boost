

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu Oct 22 16:24:24 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.20
    14                           ; Generated 12/02/2020 GMT
    15                           ; 
    16                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F628A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000E                     	;# 
    58  000E                     	;# 
    59  000F                     	;# 
    60  0010                     	;# 
    61  0011                     	;# 
    62  0012                     	;# 
    63  0015                     	;# 
    64  0015                     	;# 
    65  0016                     	;# 
    66  0017                     	;# 
    67  0018                     	;# 
    68  0019                     	;# 
    69  001A                     	;# 
    70  001F                     	;# 
    71  0081                     	;# 
    72  0085                     	;# 
    73  0086                     	;# 
    74  008C                     	;# 
    75  008E                     	;# 
    76  0092                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009A                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009F                     	;# 
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001F                     	;# 
   108  0081                     	;# 
   109  0085                     	;# 
   110  0086                     	;# 
   111  008C                     	;# 
   112  008E                     	;# 
   113  0092                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009F                     	;# 
   121  0005                     _PORTA	set	5
   122  0018                     _RCSTA	set	24
   123  001F                     _CMCON	set	31
   124  0019                     _TXREG	set	25
   125  0098                     _TXSTA	set	152
   126  0099                     _SPBRG	set	153
   127  0086                     _TRISB	set	134
   128  0085                     _TRISA	set	133
   129  0098                     _TXSTAbits	set	152
   130                           
   131                           	psect	strings
   132  0001                     __pstrings:
   133  0001                     stringtab:
   134  0001                     __stringtab:
   135  0001                     stringcode:	
   136                           ;	String table - string pointers are 1 byte each
   137                           
   138  0001                     stringdir:
   139  0001  3000               	movlw	high stringdir
   140  0002  008A               	movwf	10
   141  0003  0804               	movf	4,w
   142  0004  0A84               	incf	4,f
   143  0005  0782               	addwf	2,f
   144  0006                     __stringbase:
   145  0006  3400               	retlw	0
   146  0007                     __end_of__stringtab:
   147  0007                     STR_2:
   148  0007  3441               	retlw	65	;'A'
   149  0008  3454               	retlw	84	;'T'
   150  0009  342B               	retlw	43	;'+'
   151  000A  344E               	retlw	78	;'N'
   152  000B  3441               	retlw	65	;'A'
   153  000C  344D               	retlw	77	;'M'
   154  000D  3445               	retlw	69	;'E'
   155  000E  3454               	retlw	84	;'T'
   156  000F  346F               	retlw	111	;'o'
   157  0010  3475               	retlw	117	;'u'
   158  0011  3472               	retlw	114	;'r'
   159  0012  3447               	retlw	71	;'G'
   160  0013  3465               	retlw	101	;'e'
   161  0014  346E               	retlw	110	;'n'
   162  0015  3442               	retlw	66	;'B'
   163  0016  346F               	retlw	111	;'o'
   164  0017  346F               	retlw	111	;'o'
   165  0018  3473               	retlw	115	;'s'
   166  0019  3474               	retlw	116	;'t'
   167  001A  3400               	retlw	0
   168  001B                     STR_3:
   169  001B  3441               	retlw	65	;'A'
   170  001C  3454               	retlw	84	;'T'
   171  001D  342B               	retlw	43	;'+'
   172  001E  3450               	retlw	80	;'P'
   173  001F  3449               	retlw	73	;'I'
   174  0020  344E               	retlw	78	;'N'
   175  0021  3431               	retlw	49	;'1'
   176  0022  3432               	retlw	50	;'2'
   177  0023  3433               	retlw	51	;'3'
   178  0024  3434               	retlw	52	;'4'
   179  0025  3400               	retlw	0
   180  0026                     STR_1:
   181  0026  3441               	retlw	65	;'A'
   182  0027  3454               	retlw	84	;'T'
   183  0028  342B               	retlw	43	;'+'
   184  0029  3442               	retlw	66	;'B'
   185  002A  3441               	retlw	65	;'A'
   186  002B  3455               	retlw	85	;'U'
   187  002C  3444               	retlw	68	;'D'
   188  002D  3434               	retlw	52	;'4'
   189  002E  3400               	retlw	0
   190  002F                     STR_4:
   191  002F  3448               	retlw	72	;'H'
   192  0030  346F               	retlw	111	;'o'
   193  0031  346C               	retlw	108	;'l'
   194  0032  3461               	retlw	97	;'a'
   195  0033  3400               	retlw	0
   196                           
   197                           	psect	cinit
   198  07FE                     start_initialization:	
   199                           ; #config settings
   200                           
   201  07FE                     __initialization:
   202  07FE                     end_of_initialization:	
   203                           ;End of C runtime variable initialization code
   204                           
   205  07FE                     __end_of__initialization:
   206  07FE  0183               	clrf	3
   207  07FF  2F4E               	ljmp	_main	;jump to C main() function
   208                           
   209                           	psect	cstackCOMMON
   210  0070                     __pcstackCOMMON:
   211  0070                     ?_UART_write:
   212  0070                     ??_UART_write:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0070                     ?_UART_printf:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?_main:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     UART_write@dato:	
   222                           ; 1 bytes @ 0x0
   223                           
   224                           
   225                           ; 1 bytes @ 0x0
   226  0070                     	ds	1
   227  0071                     ??_UART_printf:
   228                           
   229                           ; 1 bytes @ 0x1
   230  0071                     	ds	1
   231  0072                     UART_printf@cadena:
   232                           
   233                           ; 1 bytes @ 0x2
   234  0072                     	ds	1
   235  0073                     ??_main:
   236                           
   237                           ; 1 bytes @ 0x3
   238  0073                     	ds	3
   239  0076                     main@ValidacionLectura:
   240                           
   241                           ; 1 bytes @ 0x6
   242  0076                     	ds	1
   243  0077                     main@Lectura:
   244                           
   245                           ; 1 bytes @ 0x7
   246  0077                     	ds	1
   247                           
   248                           	psect	maintext
   249  074E                     __pmaintext:	
   250 ;;
   251 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   252 ;;
   253 ;; *************** function _main *****************
   254 ;; Defined at:
   255 ;;		line 49 in file "main.c"
   256 ;; Parameters:    Size  Location     Type
   257 ;;		None
   258 ;; Auto vars:     Size  Location     Type
   259 ;;  Lectura         1    7[COMMON] unsigned char 
   260 ;;  ValidacionLe    1    6[COMMON] unsigned char 
   261 ;; Return value:  Size  Location     Type
   262 ;;                  1    wreg      void 
   263 ;; Registers used:
   264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   265 ;; Tracked objects:
   266 ;;		On entry : B00/0
   267 ;;		On exit  : 0/0
   268 ;;		Unchanged: 0/0
   269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   270 ;;      Params:         0       0       0       0
   271 ;;      Locals:         2       0       0       0
   272 ;;      Temps:          3       0       0       0
   273 ;;      Totals:         5       0       0       0
   274 ;;Total ram usage:        5 bytes
   275 ;; Hardware stack levels required when called:    2
   276 ;; This function calls:
   277 ;;		_UART_printf
   278 ;;		_UART_write
   279 ;; This function is called by:
   280 ;;		Startup code after reset
   281 ;; This function uses a non-reentrant model
   282 ;;
   283                           
   284                           
   285                           ;psect for function _main
   286  074E                     _main:
   287  074E                     l749:	
   288                           ;incstack = 0
   289                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   290                           
   291                           
   292                           ;main.c: 53:     TRISA = 0b00111111;
   293  074E  303F               	movlw	63
   294  074F  1683               	bsf	3,5	;RP0=1, select bank1
   295  0750  1303               	bcf	3,6	;RP1=0, select bank1
   296  0751  0085               	movwf	5	;volatile
   297                           
   298                           ;main.c: 54:     TRISB = 0b00000110;
   299  0752  3006               	movlw	6
   300  0753  0086               	movwf	6	;volatile
   301                           
   302                           ;main.c: 55:     SPBRG = 25;
   303  0754  3019               	movlw	25
   304  0755  0099               	movwf	25	;volatile
   305                           
   306                           ;main.c: 56:     CMCON = 7;
   307  0756  3007               	movlw	7
   308  0757  1283               	bcf	3,5	;RP0=0, select bank0
   309  0758  1303               	bcf	3,6	;RP1=0, select bank0
   310  0759  009F               	movwf	31	;volatile
   311                           
   312                           ;main.c: 57:     TXSTA = 0b00100100;
   313  075A  3024               	movlw	36
   314  075B  1683               	bsf	3,5	;RP0=1, select bank1
   315  075C  1303               	bcf	3,6	;RP1=0, select bank1
   316  075D  0098               	movwf	24	;volatile
   317                           
   318                           ;main.c: 58:     RCSTA = 0b10000000;
   319  075E  3080               	movlw	128
   320  075F  1283               	bcf	3,5	;RP0=0, select bank0
   321  0760  1303               	bcf	3,6	;RP1=0, select bank0
   322  0761  0098               	movwf	24	;volatile
   323  0762                     l751:
   324                           
   325                           ;main.c: 62:     UART_printf ("AT+BAUD4");
   326  0762  3020               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   327  0763  273B               	fcall	_UART_printf
   328  0764                     l753:
   329                           
   330                           ;main.c: 63:     _delay((unsigned long)((1000)*(4000000/4000.0)));
   331  0764  3006               	movlw	6
   332  0765  00F5               	movwf	??_main+2
   333  0766  3013               	movlw	19
   334  0767  00F4               	movwf	??_main+1
   335  0768  30AD               	movlw	173
   336  0769  00F3               	movwf	??_main
   337  076A                     u127:
   338  076A  0BF3               	decfsz	??_main,f
   339  076B  2F6A               	goto	u127
   340  076C  0BF4               	decfsz	??_main+1,f
   341  076D  2F6A               	goto	u127
   342  076E  0BF5               	decfsz	??_main+2,f
   343  076F  2F6A               	goto	u127
   344  0770  2F71               	nop2
   345                           
   346                           ;main.c: 64:     UART_printf("AT+NAMETourGenBoost");
   347  0771  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   348  0772  273B               	fcall	_UART_printf
   349  0773                     l755:
   350                           
   351                           ;main.c: 65:     _delay((unsigned long)((1000)*(4000000/4000.0)));
   352  0773  3006               	movlw	6
   353  0774  00F5               	movwf	??_main+2
   354  0775  3013               	movlw	19
   355  0776  00F4               	movwf	??_main+1
   356  0777  30AD               	movlw	173
   357  0778  00F3               	movwf	??_main
   358  0779                     u137:
   359  0779  0BF3               	decfsz	??_main,f
   360  077A  2F79               	goto	u137
   361  077B  0BF4               	decfsz	??_main+1,f
   362  077C  2F79               	goto	u137
   363  077D  0BF5               	decfsz	??_main+2,f
   364  077E  2F79               	goto	u137
   365  077F  2F80               	nop2
   366  0780                     l757:
   367                           
   368                           ;main.c: 66:     UART_printf("AT+PIN1234");
   369  0780  3015               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   370  0781  273B               	fcall	_UART_printf
   371                           
   372                           ;main.c: 67:     _delay((unsigned long)((1000)*(4000000/4000.0)));
   373  0782  3006               	movlw	6
   374  0783  00F5               	movwf	??_main+2
   375  0784  3013               	movlw	19
   376  0785  00F4               	movwf	??_main+1
   377  0786  30AD               	movlw	173
   378  0787  00F3               	movwf	??_main
   379  0788                     u147:
   380  0788  0BF3               	decfsz	??_main,f
   381  0789  2F88               	goto	u147
   382  078A  0BF4               	decfsz	??_main+1,f
   383  078B  2F88               	goto	u147
   384  078C  0BF5               	decfsz	??_main+2,f
   385  078D  2F88               	goto	u147
   386  078E  2F8F               	nop2
   387  078F                     l37:	
   388                           ;main.c: 71:     uint8_t Lectura;;main.c: 72:     uint8_t ValidacionLectura;;main.c: 76:
      +                               while (1){
   389                           
   390                           
   391                           ;main.c: 77:         Lectura = PORTA;
   392  078F  1283               	bcf	3,5	;RP0=0, select bank0
   393  0790  1303               	bcf	3,6	;RP1=0, select bank0
   394  0791  0805               	movf	5,w	;volatile
   395  0792  00F3               	movwf	??_main
   396  0793  0873               	movf	??_main,w
   397  0794  00F7               	movwf	main@Lectura
   398  0795                     l759:
   399                           
   400                           ;main.c: 78:         Lectura &= 0b00111111;
   401  0795  303F               	movlw	63
   402  0796  00F3               	movwf	??_main
   403  0797  0873               	movf	??_main,w
   404  0798  05F7               	andwf	main@Lectura,f
   405  0799                     l761:
   406                           
   407                           ;main.c: 80:         if (Lectura!= 0b00111111){
   408  0799  303F               	movlw	63
   409  079A  0677               	xorwf	main@Lectura,w
   410  079B  1903               	btfsc	3,2
   411  079C  2F9E               	goto	u81
   412  079D  2F9F               	goto	u80
   413  079E                     u81:
   414  079E  2FBC               	goto	l773
   415  079F                     u80:
   416  079F                     l763:
   417                           
   418                           ;main.c: 83:             _delay((unsigned long)((10)*(4000000/4000.0)));
   419  079F  300D               	movlw	13
   420  07A0  00F4               	movwf	??_main+1
   421  07A1  30FB               	movlw	251
   422  07A2  00F3               	movwf	??_main
   423  07A3                     u157:
   424  07A3  0BF3               	decfsz	??_main,f
   425  07A4  2FA3               	goto	u157
   426  07A5  0BF4               	decfsz	??_main+1,f
   427  07A6  2FA3               	goto	u157
   428  07A7  2FA8               	nop2
   429                           
   430                           ;main.c: 84:             Lectura = PORTA;
   431  07A8  1283               	bcf	3,5	;RP0=0, select bank0
   432  07A9  1303               	bcf	3,6	;RP1=0, select bank0
   433  07AA  0805               	movf	5,w	;volatile
   434  07AB  00F3               	movwf	??_main
   435  07AC  0873               	movf	??_main,w
   436  07AD  00F7               	movwf	main@Lectura
   437  07AE                     l765:
   438                           
   439                           ;main.c: 85:             Lectura &= 0b00111111;
   440  07AE  303F               	movlw	63
   441  07AF  00F3               	movwf	??_main
   442  07B0  0873               	movf	??_main,w
   443  07B1  05F7               	andwf	main@Lectura,f
   444  07B2                     l767:
   445                           
   446                           ;main.c: 87:             if (Lectura!= 0b00111111){
   447  07B2  303F               	movlw	63
   448  07B3  0677               	xorwf	main@Lectura,w
   449  07B4  1903               	btfsc	3,2
   450  07B5  2FB7               	goto	u91
   451  07B6  2FB8               	goto	u90
   452  07B7                     u91:
   453  07B7  2FBB               	goto	l771
   454  07B8                     u90:
   455  07B8                     l769:
   456                           
   457                           ;main.c: 88:                 ValidacionLectura = 1;
   458  07B8  01F6               	clrf	main@ValidacionLectura
   459  07B9  0AF6               	incf	main@ValidacionLectura,f
   460                           
   461                           ;main.c: 89:             } else {
   462  07BA  2FBC               	goto	l773
   463  07BB                     l771:
   464                           
   465                           ;main.c: 90:                 ValidacionLectura = 0;
   466  07BB  01F6               	clrf	main@ValidacionLectura
   467  07BC                     l773:
   468                           
   469                           ;main.c: 96:         if (ValidacionLectura == 1){
   470  07BC  0376               	decf	main@ValidacionLectura,w
   471  07BD  1D03               	btfss	3,2
   472  07BE  2FC0               	goto	u101
   473  07BF  2FC1               	goto	u100
   474  07C0                     u101:
   475  07C0  2F8F               	goto	l37
   476  07C1                     u100:
   477  07C1  2FD4               	goto	l791
   478  07C2                     l777:
   479                           
   480                           ;main.c: 100:                     UART_write('A');
   481  07C2  3041               	movlw	65
   482  07C3  272F               	fcall	_UART_write
   483                           
   484                           ;main.c: 101:                     break;
   485  07C4  2FF0               	goto	l793
   486  07C5                     l779:
   487                           
   488                           ;main.c: 104:                     UART_printf("Hola");
   489  07C5  3029               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   490  07C6  273B               	fcall	_UART_printf
   491                           
   492                           ;main.c: 105:                     break;
   493  07C7  2FF0               	goto	l793
   494  07C8                     l781:
   495                           
   496                           ;main.c: 108:                     UART_write('C');
   497  07C8  3043               	movlw	67
   498  07C9  272F               	fcall	_UART_write
   499                           
   500                           ;main.c: 109:                     break;
   501  07CA  2FF0               	goto	l793
   502  07CB                     l783:
   503                           
   504                           ;main.c: 112:                     UART_write('D');
   505  07CB  3044               	movlw	68
   506  07CC  272F               	fcall	_UART_write
   507                           
   508                           ;main.c: 113:                     break;
   509  07CD  2FF0               	goto	l793
   510  07CE                     l785:
   511                           
   512                           ;main.c: 116:                     UART_write('E');
   513  07CE  3045               	movlw	69
   514  07CF  272F               	fcall	_UART_write
   515                           
   516                           ;main.c: 117:                     break;
   517  07D0  2FF0               	goto	l793
   518  07D1                     l787:
   519                           
   520                           ;main.c: 120:                     UART_write('F');
   521  07D1  3046               	movlw	70
   522  07D2  272F               	fcall	_UART_write
   523                           
   524                           ;main.c: 121:                     break;
   525  07D3  2FF0               	goto	l793
   526  07D4                     l791:
   527  07D4  0877               	movf	main@Lectura,w
   528  07D5  00F3               	movwf	??_main
   529  07D6  01F4               	clrf	??_main+1
   530                           
   531                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   532                           ; Switch size 1, requested type "simple"
   533                           ; Number of cases is 1, Range of values is 0 to 0
   534                           ; switch strategies available:
   535                           ; Name         Instructions Cycles
   536                           ; simple_byte            4     3 (average)
   537                           ; direct_byte            7     6 (fixed)
   538                           ; jumptable            260     6 (fixed)
   539                           ;	Chosen strategy is simple_byte
   540  07D7  0874               	movf	??_main+1,w
   541  07D8  3A00               	xorlw	0	; case 0
   542  07D9  1903               	skipnz
   543  07DA  2FDC               	goto	l833
   544  07DB  2FF0               	goto	l793
   545  07DC                     l833:
   546                           
   547                           ; Switch size 1, requested type "simple"
   548                           ; Number of cases is 6, Range of values is 31 to 62
   549                           ; switch strategies available:
   550                           ; Name         Instructions Cycles
   551                           ; simple_byte           19    10 (average)
   552                           ; direct_byte           41     9 (fixed)
   553                           ; jumptable            263     9 (fixed)
   554                           ;	Chosen strategy is simple_byte
   555  07DC  0873               	movf	??_main,w
   556  07DD  3A1F               	xorlw	31	; case 31
   557  07DE  1903               	skipnz
   558  07DF  2FD1               	goto	l787
   559  07E0  3A30               	xorlw	48	; case 47
   560  07E1  1903               	skipnz
   561  07E2  2FCE               	goto	l785
   562  07E3  3A18               	xorlw	24	; case 55
   563  07E4  1903               	skipnz
   564  07E5  2FCB               	goto	l783
   565  07E6  3A0C               	xorlw	12	; case 59
   566  07E7  1903               	skipnz
   567  07E8  2FC8               	goto	l781
   568  07E9  3A06               	xorlw	6	; case 61
   569  07EA  1903               	skipnz
   570  07EB  2FC5               	goto	l779
   571  07EC  3A03               	xorlw	3	; case 62
   572  07ED  1903               	skipnz
   573  07EE  2FC2               	goto	l777
   574  07EF  2FF0               	goto	l793
   575  07F0                     l793:
   576  07F0  303F               	movlw	63
   577  07F1  1283               	bcf	3,5	;RP0=0, select bank0
   578  07F2  1303               	bcf	3,6	;RP1=0, select bank0
   579  07F3  0505               	andwf	5,w	;volatile
   580  07F4  00F3               	movwf	??_main
   581  07F5  303F               	movlw	63
   582  07F6  0673               	xorwf	??_main,w
   583  07F7  1D03               	btfss	3,2
   584  07F8  2FFA               	goto	u111
   585  07F9  2FFB               	goto	u110
   586  07FA                     u111:
   587  07FA  2FF0               	goto	l793
   588  07FB                     u110:
   589  07FB                     l795:
   590                           
   591                           ;main.c: 126:             ValidacionLectura = 0;
   592  07FB  01F6               	clrf	main@ValidacionLectura
   593  07FC  2F8F               	goto	l37
   594  07FD  2800               	ljmp	start
   595  07FE                     __end_of_main:
   596                           
   597                           	psect	text1
   598  073B                     __ptext1:	
   599 ;; *************** function _UART_printf *****************
   600 ;; Defined at:
   601 ;;		line 42 in file "main.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  cadena          1    wreg     PTR unsigned char 
   604 ;;		 -> STR_4(5), STR_3(11), STR_2(20), STR_1(9), 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  cadena          1    2[COMMON] PTR unsigned char 
   607 ;;		 -> STR_4(5), STR_3(11), STR_2(20), STR_1(9), 
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   617 ;;      Params:         0       0       0       0
   618 ;;      Locals:         1       0       0       0
   619 ;;      Temps:          1       0       0       0
   620 ;;      Totals:         2       0       0       0
   621 ;;Total ram usage:        2 bytes
   622 ;; Hardware stack levels used:    1
   623 ;; Hardware stack levels required when called:    1
   624 ;; This function calls:
   625 ;;		_UART_write
   626 ;; This function is called by:
   627 ;;		_main
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           
   632                           ;psect for function _UART_printf
   633  073B                     _UART_printf:
   634                           
   635                           ;incstack = 0
   636                           ; Regs used in _UART_printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   637                           ;UART_printf@cadena stored from wreg
   638  073B  00F2               	movwf	UART_printf@cadena
   639  073C                     l741:
   640                           
   641                           ;main.c: 43:         while (*cadena !=0){
   642  073C  2F45               	goto	l747
   643  073D                     l743:
   644                           
   645                           ;main.c: 44:             UART_write(*cadena);
   646  073D  0872               	movf	UART_printf@cadena,w
   647  073E  0084               	movwf	4
   648  073F  2001               	fcall	stringdir
   649  0740  272F               	fcall	_UART_write
   650  0741                     l745:
   651                           
   652                           ;main.c: 45:             cadena++;
   653  0741  3001               	movlw	1
   654  0742  00F1               	movwf	??_UART_printf
   655  0743  0871               	movf	??_UART_printf,w
   656  0744  07F2               	addwf	UART_printf@cadena,f
   657  0745                     l747:
   658                           
   659                           ;main.c: 43:         while (*cadena !=0){
   660  0745  0872               	movf	UART_printf@cadena,w
   661  0746  0084               	movwf	4
   662  0747  2001               	fcall	stringdir
   663  0748  3A00               	xorlw	0
   664  0749  1D03               	skipz
   665  074A  2F4C               	goto	u71
   666  074B  2F4D               	goto	u70
   667  074C                     u71:
   668  074C  2F3D               	goto	l743
   669  074D                     u70:
   670  074D                     l32:
   671  074D  0008               	return
   672  074E                     __end_of_UART_printf:
   673                           
   674                           	psect	text2
   675  072F                     __ptext2:	
   676 ;; *************** function _UART_write *****************
   677 ;; Defined at:
   678 ;;		line 35 in file "main.c"
   679 ;; Parameters:    Size  Location     Type
   680 ;;  dato            1    wreg     unsigned char 
   681 ;; Auto vars:     Size  Location     Type
   682 ;;  dato            1    0[COMMON] unsigned char 
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   692 ;;      Params:         0       0       0       0
   693 ;;      Locals:         1       0       0       0
   694 ;;      Temps:          0       0       0       0
   695 ;;      Totals:         1       0       0       0
   696 ;;Total ram usage:        1 bytes
   697 ;; Hardware stack levels used:    1
   698 ;; This function calls:
   699 ;;		Nothing
   700 ;; This function is called by:
   701 ;;		_UART_printf
   702 ;;		_main
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           
   707                           ;psect for function _UART_write
   708  072F                     _UART_write:
   709                           
   710                           ;incstack = 0
   711                           ; Regs used in _UART_write: [wreg]
   712                           ;UART_write@dato stored from wreg
   713  072F  00F0               	movwf	UART_write@dato
   714  0730                     l647:
   715                           
   716                           ;main.c: 36:         TXREG = dato;
   717  0730  0870               	movf	UART_write@dato,w
   718  0731  1283               	bcf	3,5	;RP0=0, select bank0
   719  0732  1303               	bcf	3,6	;RP1=0, select bank0
   720  0733  0099               	movwf	25	;volatile
   721  0734                     l23:	
   722                           ;main.c: 37:         while (TXSTAbits.TRMT == 0);
   723                           
   724  0734  1683               	bsf	3,5	;RP0=1, select bank1
   725  0735  1303               	bcf	3,6	;RP1=0, select bank1
   726  0736  1C98               	btfss	24,1	;volatile
   727  0737  2F39               	goto	u11
   728  0738  2F3A               	goto	u10
   729  0739                     u11:
   730  0739  2F34               	goto	l23
   731  073A                     u10:
   732  073A                     l26:
   733  073A  0008               	return
   734  073B                     __end_of_UART_write:
   735  007E                     btemp	set	126	;btemp
   736  007E                     wtemp0	set	126
   737                           
   738                           	psect	config
   739                           
   740                           ;Config register CONFIG @ 0x2007
   741                           ;	Oscillator Selection bits
   742                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
   743                           ;	Watchdog Timer Enable bit
   744                           ;	WDTE = OFF, WDT disabled
   745                           ;	Power-up Timer Enable bit
   746                           ;	PWRTE = OFF, PWRT disabled
   747                           ;	RA5/MCLR/VPP Pin Function Select bit
   748                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
   749                           ;	Brown-out Detect Enable bit
   750                           ;	BOREN = OFF, BOD disabled
   751                           ;	Low-Voltage Programming Enable bit
   752                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   753                           ;	Data EE Memory Code Protection bit
   754                           ;	CPD = OFF, Data memory code protection off
   755                           ;	Flash Program Memory Code Protection bit
   756                           ;	CP = OFF, Code protection off
   757  2007                     	org	8199
   758  2007  3F18               	dw	16152

Data Sizes:
    Strings     45
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    UART_printf@cadena	PTR unsigned char  size(1) Largest target is 20
		 -> STR_4(CODE[5]), STR_3(CODE[11]), STR_2(CODE[20]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_UART_printf
    _UART_printf->_UART_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     302
                                              3 COMMON     5     5      0
                        _UART_printf
                         _UART_write
 ---------------------------------------------------------------------------------
 (1) _UART_printf                                          2     2      0     192
                                              1 COMMON     2     2      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (1) _UART_write                                           1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_printf
     _UART_write
   _UART_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu Oct 22 16:24:24 2020

                      pc 0002                       l23 0734                       l32 074D  
                     l26 073A                       l37 078F                       u10 073A  
                     u11 0739              main@Lectura 0077                       u70 074D  
                     u71 074C                       u80 079F                       u81 079E  
                     u90 07B8                       u91 07B7                       fsr 0004  
                    l741 073C                      l647 0730                      l743 073D  
                    l751 0762                      l745 0741                      l833 07DC  
                    l761 0799                      l753 0764                      l747 0745  
                    l771 07BB                      l763 079F                      l755 0773  
                    l781 07C8                      l765 07AE                      l773 07BC  
                    l757 0780                      l749 074E                      l783 07CB  
                    l791 07D4                      l767 07B2                      l759 0795  
                    l785 07CE                      l793 07F0                      l777 07C2  
                    l769 07B8                      l795 07FB                      l787 07D1  
                    l779 07C5                      u100 07C1                      u101 07C0  
                    u110 07FB                      u111 07FA                      u127 076A  
                    u137 0779                      u147 0788                      u157 07A3  
                    fsr0 0004                     STR_1 0026                     STR_2 0007  
                   STR_3 001B                     STR_4 002F                     _main 074E  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _CMCON 001F                    _RCSTA 0018                    _SPBRG 0099  
                  _PORTA 0005                    _TRISA 0085                    _TRISB 0086  
                  _TXREG 0019                    _TXSTA 0098              ?_UART_write 0070  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07FE             __end_of_main 07FE                   ??_main 0073  
    __size_of_UART_write 000C             ?_UART_printf 0070    main@ValidacionLectura 0076  
__end_of__initialization 07FE           __pcstackCOMMON 0070               __pmaintext 074E  
           ??_UART_write 0070               __stringtab 0001       __end_of_UART_write 073B  
                __ptext1 073B                  __ptext2 072F     __size_of_UART_printf 0013  
   end_of_initialization 07FE                _TXSTAbits 0098      start_initialization 07FE  
              ___latbits 0000        UART_printf@cadena 0072                __pstrings 0001  
          ??_UART_printf 0071              __stringbase 0006           UART_write@dato 0070  
     __end_of__stringtab 0007      __end_of_UART_printf 074E            __size_of_main 00B0  
              stringcode 0001              _UART_printf 073B                 stringdir 0001  
               stringtab 0001               _UART_write 072F  
